'use strict';

var sha3 = require('../index.js');
var Web3 = require('web3');
var web3 = new Web3();
var assert = require('chai').assert;
var keccak256 = require('js-sha3').keccak_256; // eslint-disable-line
var BigNumber = require('bignumber.js');

function randomString(length, chars) {
  var result = ''; // eslint-disable-line

  for (var i = length; i > 0; --i) {
    // eslint-disable-line
    result += chars[Math.floor(Math.random() * chars.length)];
  }

  return result;
}

function testSha3AgainstWeb3(length) {
  var value = randomString(length, '():0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');

  assert.equal(sha3(value), web3.sha3(value));
}

function testSha3AgainstKeccak(length) {
  var value = randomString(length, '():0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');

  assert.equal(sha3(value), '0x' + keccak256(value));
}

describe('sha3 method', function () {
  it('test invalid use of sha3 via BigNumber', function () {
    try {
      sha3(new BigNumber(3294984243));
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test invalid use of sha3 via null', function () {
    try {
      sha3(null);
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test invalid use of sha3 via empty object', function () {
    try {
      sha3({});
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test invalid use of sha3 via boolean', function () {
    try {
      sha3(true);
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test invalid use of sha3 via number', function () {
    try {
      sha3(423897234924);
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test invalid use of sha3 via number zero', function () {
    try {
      sha3(0);
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test invalid use of sha3 via number zero return buffer', function () {
    try {
      sha3(0, true);
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test invalid use of sha3 via undefined', function () {
    try {
      sha3(undefined);
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test invalid use of sha3 via undefined buffer', function () {
    try {
      sha3(undefined, true);
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test invalid use of sha3 via function', function () {
    function testMethod() {}
    try {
      sha3(testMethod);
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test invalid use of sha3 via function return buffer', function () {
    function testMethod() {}
    try {
      sha3(testMethod, true);
    } catch (error) {
      assert.equal(typeof error, 'object');
    }
  });

  it('test valid use with string', function () {
    var output = sha3('something new');
    assert.equal(typeof output, 'string');
  });

  it('test valid use with empty string', function () {
    var output = sha3('');
    assert.equal(typeof output, 'string');
  });

  it('test valid use with empty hash', function () {
    var output = sha3('0x');
    assert.equal(typeof output, 'string');
  });

  it('test valid use tx hash', function () {
    var output = sha3('0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad');
    assert.equal(typeof output, 'string');
  });

  it('test valid use address', function () {
    var output = sha3('0x407d73d8a49eeb85d32cf465507dd71d507100c1');
    assert.equal(typeof output, 'string');
  });

  it('test valid use 8 bytes', function () {
    var output = sha3('0x407d73d8a49eeb');
    assert.equal(typeof output, 'string');
  });

  it('test valid use 16 bytes', function () {
    var output = sha3('0x407d73d8a49eeb85d32cf4');
    assert.equal(typeof output, 'string');
  });

  it('test valid use 4 bytes', function () {
    var output = sha3('0x407d');
    assert.equal(typeof output, 'string');
  });

  it('test valid use 1 bytes', function () {
    var output = sha3('0x01');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string number', function () {
    var output = sha3('234874238979287');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string number', function () {
    var output = sha3('28748237');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string number', function () {
    var output = sha3('2438972349234729872');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string number', function () {
    var output = sha3('1');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string number', function () {
    var output = sha3('0');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string number very long', function () {
    var output = sha3('3429874892738497239487239847289472987238');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string number very long', function () {
    var output = sha3('3429874892738497239487239847289472987238243827');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string number very long', function () {
    var output = sha3('342348727829874892738497239487239847289472987238243827');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string contract bytecode', function () {
    var output = sha3('606060405234610000575b6111c2806100186000396000f3606060405236156100d3576000357c0100000000000000000000000000000000000000000000000000000000900480630c9fd581146100dc5780632f2769d1146100f957806332958fcb1461016257806336f656d8146101975780634db19e7e14610274578063515361f6146102dd5780637ba048091461030357806388b44c851461036357806397624631146103cc57806398296c5414610466578063a34edc031461048c578063a5982885146104ec578063ba0bba4014610509578063f320d96314610518578063f7fe3477146105b2575b6100da5b5b565b005b34610000576100f760048080359060200190919050506105d8565b005b3461000057610160600480803590602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610684565b005b346100005761017d600480803590602001909190505061079f565b604051808260001916815260200191505060405180910390f35b3461000057610272600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506107d0565b005b34610000576102db600480803590602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061091d565b005b34610000576103016004808035906020019091908035906020019091905050610a16565b005b3461000057610361600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ae4565b005b34610000576103ca600480803590602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610bdd565b005b3461000057610464600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ccc565b005b346100005761048a6004808035906020019091908035906020019091905050610dcc565b005b34610000576104ea600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e6e565b005b34610000576105076004808035906020019091905050610f67565b005b3461000057610516611013565b005b34610000576105b0600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611016565b005b34610000576105d66004808035906020019091908035906020019091905050611116565b005b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e6106028261079f565b61060c600161079f565b60405180806020018460001916815260200183600019168152602001806020018381038352600a8152602001807f417373657274547275650000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b50565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e8373ffffffffffffffffffffffffffffffffffffffff166001028373ffffffffffffffffffffffffffffffffffffffff16600102836040518080602001856000191681526020018460001916815260200180602001838103835260088152602001807f41737365727445710000000000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156107895780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b505050565b60006001151582151514156107be57600160010290506107cb566107ca565b600060010290506107cb565b5b919050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e83604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050604051809103902083604051808280519060200190808383829060006004602084601f0104600302600f01f1509050019150506040518091039020836040518080602001856000191681526020018460001916815260200180602001838103835260088152602001807f41737365727445710000000000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156109075780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b505050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e6109478461079f565b6109508461079f565b836040518080602001856000191681526020018460001916815260200180602001838103835260088152602001807f41737365727445710000000000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610a005780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b505050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e8273ffffffffffffffffffffffffffffffffffffffff166001028273ffffffffffffffffffffffffffffffffffffffff166001026040518080602001846000191681526020018360001916815260200180602001838103835260088152602001807f417373657274457100000000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e610b0e8361079f565b610b18600061079f565b8360405180806020018560001916815260200184600019168152602001806020018381038352600b8152602001807f41737365727446616c73650000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610bc85780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e8360010283600102836040518080602001856000191681526020018460001916815260200180602001838103835260088152602001807f41737365727445710000000000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610cb65780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b505050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e82604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050604051809103902082604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505060405180910390206040518080602001846000191681526020018360001916815260200180602001838103835260088152602001807f417373657274457100000000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e82600102826001026040518080602001846000191681526020018360001916815260200180602001838103835260088152602001807f417373657274457100000000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e610e988361079f565b610ea2600161079f565b8360405180806020018560001916815260200184600019168152602001806020018381038352600a8152602001807f41737365727454727565000000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610f525780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e610f918261079f565b610f9b600061079f565b60405180806020018460001916815260200183600019168152602001806020018381038352600b8152602001807f41737365727446616c736500000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b50565b5b565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e82604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050604051809103902082604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505060405180910390206040518080602001846000191681526020018360001916815260200180602001838103835260088152602001807f417373657274457100000000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e6111408361079f565b6111498361079f565b6040518080602001846000191681526020018360001916815260200180602001838103835260088152602001807f417373657274457100000000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b505056');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string contract hexed bytecode', function () {
    var output = sha3('0x606060405234610000575b6111c2806100186000396000f3606060405236156100d3576000357c0100000000000000000000000000000000000000000000000000000000900480630c9fd581146100dc5780632f2769d1146100f957806332958fcb1461016257806336f656d8146101975780634db19e7e14610274578063515361f6146102dd5780637ba048091461030357806388b44c851461036357806397624631146103cc57806398296c5414610466578063a34edc031461048c578063a5982885146104ec578063ba0bba4014610509578063f320d96314610518578063f7fe3477146105b2575b6100da5b5b565b005b34610000576100f760048080359060200190919050506105d8565b005b3461000057610160600480803590602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610684565b005b346100005761017d600480803590602001909190505061079f565b604051808260001916815260200191505060405180910390f35b3461000057610272600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506107d0565b005b34610000576102db600480803590602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061091d565b005b34610000576103016004808035906020019091908035906020019091905050610a16565b005b3461000057610361600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ae4565b005b34610000576103ca600480803590602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610bdd565b005b3461000057610464600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ccc565b005b346100005761048a6004808035906020019091908035906020019091905050610dcc565b005b34610000576104ea600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e6e565b005b34610000576105076004808035906020019091905050610f67565b005b3461000057610516611013565b005b34610000576105b0600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611016565b005b34610000576105d66004808035906020019091908035906020019091905050611116565b005b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e6106028261079f565b61060c600161079f565b60405180806020018460001916815260200183600019168152602001806020018381038352600a8152602001807f417373657274547275650000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b50565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e8373ffffffffffffffffffffffffffffffffffffffff166001028373ffffffffffffffffffffffffffffffffffffffff16600102836040518080602001856000191681526020018460001916815260200180602001838103835260088152602001807f41737365727445710000000000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156107895780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b505050565b60006001151582151514156107be57600160010290506107cb566107ca565b600060010290506107cb565b5b919050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e83604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050604051809103902083604051808280519060200190808383829060006004602084601f0104600302600f01f1509050019150506040518091039020836040518080602001856000191681526020018460001916815260200180602001838103835260088152602001807f41737365727445710000000000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156109075780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b505050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e6109478461079f565b6109508461079f565b836040518080602001856000191681526020018460001916815260200180602001838103835260088152602001807f41737365727445710000000000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610a005780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b505050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e8273ffffffffffffffffffffffffffffffffffffffff166001028273ffffffffffffffffffffffffffffffffffffffff166001026040518080602001846000191681526020018360001916815260200180602001838103835260088152602001807f417373657274457100000000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e610b0e8361079f565b610b18600061079f565b8360405180806020018560001916815260200184600019168152602001806020018381038352600b8152602001807f41737365727446616c73650000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610bc85780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e8360010283600102836040518080602001856000191681526020018460001916815260200180602001838103835260088152602001807f41737365727445710000000000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610cb65780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b505050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e82604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050604051809103902082604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505060405180910390206040518080602001846000191681526020018360001916815260200180602001838103835260088152602001807f417373657274457100000000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e82600102826001026040518080602001846000191681526020018360001916815260200180602001838103835260088152602001807f417373657274457100000000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e610e988361079f565b610ea2600161079f565b8360405180806020018560001916815260200184600019168152602001806020018381038352600a8152602001807f41737365727454727565000000000000000000000000000000000000000000008152602001506020018381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610f525780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e610f918261079f565b610f9b600061079f565b60405180806020018460001916815260200183600019168152602001806020018381038352600b8152602001807f41737365727446616c736500000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b50565b5b565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e82604051808280519060200190808383829060006004602084601f0104600302600f01f150905001915050604051809103902082604051808280519060200190808383829060006004602084601f0104600302600f01f15090500191505060405180910390206040518080602001846000191681526020018360001916815260200180602001838103835260088152602001807f417373657274457100000000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b5050565b7fa7fc9c2b3d6e1ecc2de7fb31320fb09e5b14a076d8b51df0262cd627d38ecd2e6111408361079f565b6111498361079f565b6040518080602001846000191681526020018360001916815260200180602001838103835260088152602001807f417373657274457100000000000000000000000000000000000000000000000081526020015060200183810382526000815260200160000194505050505060405180910390a15b505056');
    assert.equal(typeof output, 'string');
  });

  it('test valid use string ensure hex prefix', function () {
    var output = sha3('fdsfkjhsdf');
    assert.equal(typeof output, 'string');
    assert.equal(output.substring(0, 2), '0x');
  });

  it('test valid use string buffer return', function () {
    var output = sha3('fdsfkjhsdf', true);
    assert.equal(typeof output, 'object');
  });

  it('should preform normally as compared with web3.sha3', function () {
    for (var length = 0; length < 66; length++) {
      // eslint-disable-line
      for (var count = 0; count < 3000; count++) {
        // eslint-disable-line
        testSha3AgainstWeb3(length);
      }
    }
  });

  it('should preform normally as compared with emn178/js-sha3', function () {
    for (var length = 0; length < 66; length++) {
      // eslint-disable-line
      for (var count = 0; count < 3000; count++) {
        // eslint-disable-line
        testSha3AgainstKeccak(length);
      }
    }
  });
});